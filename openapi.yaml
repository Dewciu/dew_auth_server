openapi: 3.0.3
info:
  title: OAuth 2.0 Authorization Server with PKCE Support
  description: A specification for an OAuth 2.0 Authorization Server that supports Proof Key for Code Exchange (PKCE).
  version: 1.0.0
servers:
  - url: http://localhost:8050/oauth
  - url: https://auth.dew.com
    description: Authorization Server Base URL
paths:
  /authorize:
    get:
      tags:
        - Authorization
      summary: Authorization Endpoint
      description: Initiates the OAuth 2.0 authorization process.
      parameters:
        - name: response_type
          in: query
          required: true
          description: Response type indicating the authorization grant type (e.g., `code` for authorization code flow).
          schema:
            type: string
            enum: [code]
        - name: client_id
          in: query
          required: true
          description: Client identifier issued to the client during registration.
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: false
          description: Redirection URI to which the response will be sent.
          schema:
            type: string
        - name: scope
          in: query
          required: false
          description: Space-separated list of scopes requested by the client.
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: Opaque value used to maintain state between the request and callback.
          schema:
            type: string
        - name: code_challenge
          in: query
          required: true
          description: PKCE code challenge derived from the code verifier.
          schema:
            type: string
        - name: code_challenge_method
          in: query
          required: false
          description: The method used to derive the code challenge (e.g., `S256` or `plain`).
          schema:
            type: string
            enum: [plain, S256]
      responses:
        302:
          description: Redirect to the client's redirect URI with authorization code and state.
        400:
          $ref: '#/components/responses/BadRequest'
  /token:
    post:
      tags:
        - Authorization
      summary: Token Endpoint
      description: Exchanges an authorization code or refresh token, for an access token.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: The type of grant being used (e.g., `authorization_code`).
                  enum: [authorization_code, refresh_token]
                code:
                  type: string
                  description: The authorization code received from the authorization endpoint.
                redirect_uri:
                  type: string
                  description: The redirect URI used in the initial authorization request.
                client_id:
                  type: string
                  description: Client identifier issued to the client during registration.
                client_secret:
                  type: string
                  description: Client secret granted after client registration (e.g., for retrieving refresh token).
                refrest_token:
                  type: string
                  description: Refresh token used to obtain a new access token.
                code_verifier:
                  type: string
                  description: PKCE code verifier used to generate the code challenge.
              required:
                - grant_type
                - client_id
      responses:
        200:
          description: Access token response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The access token issued by the authorization server.
                  token_type:
                    type: string
                    description: The type of token issued (e.g., `Bearer`).
                    example: Bearer
                  expires_in:
                    type: integer
                    description: Lifetime in seconds of the access token.
                  refresh_token:
                    type: string
                    description: Token used to obtain a new access token.
                  scope:
                    type: string
                    description: Scopes granted by the access token.
        400:
          $ref: '#/components/responses/BadRequest'
  /introspect:
    post:
      tags:
        - Token Management
      summary: Token Introspection Endpoint
      description: Allows resource servers to validate and inspect access tokens.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect.
                token_type_hint:
                  type: string
                  description: Hint about the type of token being introspected.
                  enum: [access_token, refresh_token]
              required:
                - token
      responses:
        200:
          description: Token introspection response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Indicates whether the token is currently active.
                  scope:
                    type: string
                    description: Scopes associated with the token.
                  client_id:
                    type: string
                    description: Client identifier associated with the token.
                  username:
                    type: string
                    description: Username associated with the token.
                  exp:
                    type: integer
                    description: Expiration time of the token.
        400:
          $ref: '#/components/responses/BadRequest'
  /revoke:
    post:
      tags:
        - Token Management
      summary: Token Revocation Endpoint
      description: Allows clients to revoke access or refresh tokens.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to revoke.
                token_type_hint:
                  type: string
                  description: Hint about the type of token being revoked.
                  enum: [access_token, refresh_token]
                client_id:
                  type: string
                  description: Client identifier.
                client_secret:
                  type: string
                  description: Client secret for authentication.
              required:
                - token
      responses:
        200:
          description: Token successfully revoked.
        400:
          $ref: '#/components/responses/BadRequest'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.dew.com/authorize
          tokenUrl: https://auth.dew.com/token
          scopes:
            read: Read access to resources
            write: Write access to resources
  responses:
    BadRequest:
      description: Bad request due to invalid parameters.
      content:
        application/json:
         schema:
          type: object
          properties:
            error:
             type: string
             example: invalid_request
            error_description:
             type: string
             example: The request is missing a required parameter, includes an invalid parameter value, or is otherwise malformed.
            errors:
             type: object
             additionalProperties:
              type: string
              example: This field is required or invalid
