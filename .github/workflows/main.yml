name: Dew Auth Server CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: dew_auth
          POSTGRES_PASSWORD: dew_auth_password
          POSTGRES_DB: dew_auth_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Install dependencies
        run: go mod download
      
      - name: Generate test certificates
        run: |
          mkdir -p certs
          openssl req -x509 -newkey rsa:4096 -keyout certs/key.pem -out certs/cert.pem -days 365 -nodes -subj "/CN=localhost"
      
      - name: Run Go tests
        run: go test -v ./...
        env:
          DEW_AUTH_DATABASE_URL: postgres://dew_auth:dew_auth_password@localhost:5432/dew_auth_db?sslmode=disable
          DEW_AUTH_REDIS_ADDRESS: localhost:6379
          DEW_AUTH_SERVER_TLS_CERT_PATH: ./certs/cert.pem
          DEW_AUTH_SERVER_TLS_KEY_PATH: ./certs/key.pem
          DEW_AUTH_SESSION_SIGNING_KEY: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          DEW_AUTH_SESSION_ENCRYPTION_KEY: FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210

  security-tests:
    name: Security and QE Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: dew_auth
          POSTGRES_PASSWORD: dew_auth_password
          POSTGRES_DB: dew_auth_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout QE repository
        uses: actions/checkout@v4
        with:
          repository: Dewciu/dew_auth_server
          path: ./dew_auth_server
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Install Go dependencies
        run: go mod download
      
      - name: Generate test certificates
        run: |
          mkdir -p certs
          openssl req -x509 -newkey rsa:4096 -keyout certs/key.pem -out certs/cert.pem -days 365 -nodes -subj "/CN=localhost"
      
      - name: Build and start Dew Auth Server
        run: |
          go build -o ./tmp/main ./cmd/main.go
          nohup ./tmp/main &
          sleep 10  # Give the server time to start
        env:
          DEW_AUTH_DATABASE_URL: postgres://dew_auth:dew_auth_password@localhost:5432/dew_auth_db?sslmode=disable
          DEW_AUTH_REDIS_ADDRESS: localhost:6379
          DEW_AUTH_SERVER_TLS_CERT_PATH: ./certs/cert.pem
          DEW_AUTH_SERVER_TLS_KEY_PATH: ./certs/key.pem
          DEW_AUTH_SESSION_SIGNING_KEY: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF
          DEW_AUTH_SESSION_ENCRYPTION_KEY: FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210FEDCBA9876543210
          
          
      - name: Checkout QE repository
        uses: actions/checkout@v4
        with:
          repository: Dewciu/dew_auth_server_qe
          path: ./dew_auth_server_qe
          token: ${{ secrets.PAT_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'         
      
      - name: Install QE test dependencies
        run: pip install -r requirements.txt
      
      - name: Run security and QE tests
        run: |
          python -m pytest tests/auth_code_test.py tests/revocation_test.py -v --report=qe_test_report.html
        working-directory: ./
        env:
          DEW_TEST_SERVER_URL: https://localhost:8050
          DEW_TEST_VERIFY_SSL: false
      
      - name: Upload QE test report
        uses: actions/upload-artifact@v4
        with:
          name: qe-test-report
          path: qe_test_report.html
          if-no-files-found: warn

  # build:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [test, security-tests]
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
      
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/dew-auth-server:latest
  #           ${{ secrets.DOCKER_HUB_USERNAME }}/dew-auth-server:${{ github.sha }}

  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     # For AWS ECS deployment
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
      
  #     - name: Update ECS service
  #       run: |
  #         aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} \
  #           --service ${{ secrets.ECS_SERVICE }} \
  #           --force-new-deployment
      
  #     - name: Wait for service to stabilize
  #       run: |
  #         aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} \
  #           --services ${{ secrets.ECS_SERVICE }}
      
  #     - name: Deployment status
  #       run: echo "Deployment completed successfully!"
